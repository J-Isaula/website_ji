citation()
citation("rsample")
install.packages("rsample")
citation()
citation("rsample")
citation("terrainr")
install.packages("terrainr")
citation("terrainr")
install.packages("unifir")
install.packages("waywiser")
install.packages("spatialsample")
install.packages("geojsonio")
install.packages("astsa")
install.packages("xts")
install.packages("ggthemes")
install.packages(gapminder)
install.packages("gapminder")
install.packages("dslabs")
install.packages("lifecontingencies")
install.packages("lifecontingencies")
install.packages("ggplot2")
install.packages("ggthemes")
install.packages("tidyverse")
install.packages("plotly")
install.packages("lifecontingencies")
install.packages("lifecontingencies")
install.packages("lifecontingencies", dependencies = TRUE)
install.packages("TTR", dependencies = TRUE)
install.packages("quantmod")
install.packages("prophet")
reticulate::repl_python()
from sympy import *
Q = symbols("Q")
CT = 100 + 20*Q + Q**2
CV = 20 + Q
CM = diff(CT,Q)
solve(Eq(CM,CV))
cantidad = solve(Eq(CM,CV))
cantidad[0]
P = CV.subs({Q:cantidad[0]})
P
plot(CT, CT/Q, CV, CM, (Q,0,100), xlim = (0, 100), ylim = (0,100), xlabel = "Q", ylabel = "P")
Q = symbols("Q")
CT = Q**2 + 10*Q + 1
P = 12
R = P*Q
CM = diff(CT,Q)
CM
IM = diff(R,Q)
IM
cantidad = solve(Eq(IM,CM))
print("El valor de la producción que garantiza un equilibrio será:", cantidad[0])
costo = CT.subs({Q:cantidad[0]})
costo
ingreso = R.subs({Q:cantidad[0]})
ingreso
Beneficios = R - CT
pi = Beneficios.subs({Q:cantidad[0]})
pi
plot(CT,CM,CT/Q,(Q,0,60), xlim=(0,5), ylim=(0,30), xlabel='Q', ylabel='CT,CM')
