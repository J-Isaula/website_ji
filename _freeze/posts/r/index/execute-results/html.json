{
  "hash": "74c9c7c1e144dd70a5dccb34c97c3745",
  "result": {
    "markdown": "---\ntitle: \"Introducción a R\"\nsubtitle: \"Generalidades\"\nauthor: \"Juan Isaula\"\ndate: \"2022-01-20\"\ncategories: [R, RStudio]\nimage: \"r_studio.png\"\n---\n\n\n\n\n# ¿Qué es R?\n\n`R` es un lenguaje y un ambiente para el manejo de datos, cálculos, y gráficos en código libre. Dada estas características los desarrollos que se han realizado en `R` son abiertos y están disponibles gratuitamente, por lo cual su uso se ha difundido ampliamente. `R` es difundido libremente por una gran diversidad de sitios espejo del `CRAN` (The comprehensive R Archive Network: red de servidores en todo el mundo que almacenan versiones id'enticas y actualizadas de código y documentación para R). Además, de ser gratuitos, los desarrollos en R se actualizan más rápido que cualquier otro de los costosos softwares comerciales que se encuentran en el mercado. Esto es así debido a que los usuarios hacen desarrollos, los documentan y los difunden en su red especializada de manera cotidiana (Quintana y Mendoza, 2016,p.23).\n\nAntes de comenzar a programar es bueno conocer los aspectos básicos del software que se esta utilizando como son: el ambiente, el funcionamiento de las herramientas de ayuda y la sintaxis básica, necesaria para el desarrollo de cualquier proyecto. En la práctica, la programación en `R` no es dificil solo hace falta acostumbrarse al ambiente y familiarizarse a la sintaxis, la cual trataremos en este material.\n\n## Ventajas de usar R\n\n-   Es software libre y por tanto su costo es nulo. \n-   Es multiplataforma: existen versiones para LinuX, Mac y Windows. Los procedimientos y análisis desarrollados en una plataforma son perfectamente desarrollables en otra. \n-   Implementa una enorme cantidad de métodos estadísticos, desde los más clasicos a los más modernos. Los métodos se organizan en librerías cuyo número se encuentra en constante crecimiento.\\\n-   Capacidad para acceder a datos en múltiples formatos. Dispone de librerías para leer datos desdes `SPSS`,`SAS`,`Access`, `MySQL`,`Excel`, etc. A si mismo permite también la generació de informes de resultados en diversos formatos.\\\n-   Enorme capacidad para manipular y modificar datos y funciones.\\\n-   Generación de gráficos de alta calidad.\\\n-   Existencia de una comunidad de usuarios muy activa, en la que participan estadísticos de renombre.\\\n-   Amplia disponibilidad de documentación, tanto en internet como en libros publicados por editoriales de prestigio. \n-   Facilidad de integración con actividad de formación en técnicas y métodos estadísticos en todos los ámbitos del conocimiento.\\\n-   Existencia de extensiones específicas para nuevas áreas como modelos gráficos o análisis de mercados financieros.\\\n-   Todos los algoritmos implementados en `R` pueden ser vistos e interpretados por cualquier usuario, por lo que este puede saber exactamente que es lo que hace el ordenador cuando ejecuta un comando.\n\n## Desventajas de usar R\n\n-   Hay empresas que por políticas no pueden instalar software libre en sus maquinas cada una tiene su politica, sus software de preferencia, sus necesidades, etc.\\\n-   Algunas de las instituciones del sector público y privado tienen un dilema. por parte necesitan ahorrar recursos y por otra parte tienen que contar con soporte técnico por el que pagan fortunas. La idea del soporte es tener el apoyo y mantenimiento por si algo sale mal tanto en la aplicación del software como en la administración de los sistemas. Por eso pagan licencias costosas por SAS, STATA y otros paquetes.\\\n-   Una de las principales desventajas es que hasta hace poco el uso de `R` estaba limitado a entornos universitarios y de usuarios con gran conocimiento de la estadística y la programación. Junto a esto, su primera impresión entre los usuarios principiantes, es de dureza y poca amigabilidad, aunque esto queda superado con el uso.\\\n-   No hay nadie a quien reclamar si algo falla, ni hay un departamento de atención al cliente que nos diga qué podemos hacer si algo va mal, si alguién procedimiento nos da un error, o simplemente si no sabemos qué sintaxis utilizar. Pero a cambio existe una comunidad de usuarios organizada en foros y dispuesta a colaborar desinteresadamente en la resolución de problemas.\\\n-   A todos los puntos anteriores podemos añadir el siguiente, que será considerado por unos una ventaja y por otros un inconveniente: Para hacer un buen uso de R hay que tener un buen conocimiento de los métodos estadísticos. En realidad esta afirmación es cierta no sólo para R, sino para cualquier paquete estadístico.\n\n## Instalación de R\n\nPara realizar la instalación de `R` y `RStudio` en `Windows`,`Mac`, `Ubuntu` o `Linux` se debe ingresar a los siguientes sitios web:\n\n-   [Instalación de R](https://www.r-project.org/)\n-   [Instalación de RStudio](https://posit.co/products/open-source/rstudio/)\n\n## Obtener Ayuda en R\n\n`R`Permite obtener ayuda para conocer toda la información (qué hace, cuál es la sintaxis correcta, qué parámetros tiene, algunos ejemplos de uso, etcétera) sobre una función, objeto o librería.\n\nExisten cinco funciones para obtener ayuda las cuales son:\n\n1.  `helt.start()`\\\n\nUtilizando esta función se encuentra un menú de recursos, entre los cuales existen manuales, referencias y demás material para comenzar a aprender R.\\\n\nescribe en tu consola de `RStudio` help.start()\n\n2.  `help(¨nombre del objeto¨)`\\\n\nEsta función facilita obtener información acerca de las funciones de los paquetes ya instalados en `R`. Si se desea obtener información acerca de una función, por ejemplo de la función `plot()`, se debe escribir `help(“plot”)` o `?plot` en la línea de comandos.\n\n3.  `example(\"nombre de la función\")`\\\n\nPara obtener ejemplos del uso de funciones, se utiliza la función `example ()`. Porejemplo, escribe`example(“array”)`.\n\n\n::: {.cell hash='_cache/unnamed-chunk-1_546e5b3106d1ca347c4653c49b4f16a3'}\n\n```{.r .cell-code}\nexample(\"array\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\narray> dim(as.array(letters))\n[1] 26\n\narray> array(1:3, c(2,4)) # recycle 1:3 \"2 2/3 times\"\n     [,1] [,2] [,3] [,4]\n[1,]    1    3    2    1\n[2,]    2    1    3    2\n\narray> #     [,1] [,2] [,3] [,4]\narray> #[1,]    1    3    2    1\narray> #[2,]    2    1    3    2\narray> \narray> \narray> \n```\n:::\n:::\n\n\n4.  `library(help = \"nombre\")`\\\n\nOtra manera de obtener información de ayuda sobre un paquete es usar la opción help para el comando library(), con lo cual tendrás información más completa. Un ejemplo es `library(help=“stats”)`.\n\n\n::: {.cell hash='_cache/unnamed-chunk-2_d11accaaf7f44721ba1f49411a6805bd'}\n\n```{.r .cell-code}\nlibrary(help=\"stats\")\n```\n:::\n\n\n5.  `vignette(“nombre de la librer ́ıa”)`\\\n\nAlgunos paquetes ya instalados en `R` incluyen viñetas dentro del ordenador. Una viñeta es un documento corto que describe como se usa un paquete. Se puede ver una viñeta usando la función `vignette()`. Escribe `vignette(“Sweave”)` en la línea de comandos.\n\n\n::: {.cell hash='_cache/unnamed-chunk-3_ea8f85445e05198a261fb83ecdf9cf42'}\n\n```{.r .cell-code}\nvignette(\"Sweave\")\n```\n:::\n\n\n## Operaciones Básicas\n\nLa forma correcta de almacenar valores, es a través de una asignación la cual se realiza especificando el símbolo `<-`. Del lado izquierdo del símbolo se especifica el nombre de la variable y del lado derecho se introduce el valor u operación.\\\n\nSe puede trabajar con una gran cantidad de operadores matemáticos que utiliza `R` y que permite realizar cálculos matemáticos, por mencionar algunos, se pueden observar en el siguiente cuadro\n\n| Operador Matemático | Función en R   |\n|---------------------|----------------|\n| $\\sqrt{x}$          | `sqrt()`       |\n| $e^x$               | `exp(x)`       |\n| $x!$                | `factorial(x)` |\n| $logaritmo(x)$      | `log(x)`       |\n| $\\pi$               | `Pi`           |\n| $|x|$               | `abs(x)`       |\n| $seno(x)$           | `sin(x)`       |\n| $coseno(x)$         | `cos(x)`       |\n| $tangente(x)$       | `tan(x)`       |\n| $cos^{-1}(x)$       | `acos(x)`      |\n| $sen^{-1}(x)$       | `asin(x)`      |\n| $tan^{-1}(x)$       | `atan(x)`      |\n\nAsignar un valor a cierta cantidad de variables por ejemplo: a una variable $w$ el valor 3, a la variable $y$ el valor 7 y a la variable $z$ el valor 90, a una variable $suma$ la adición de las variables anteriores y finalmente obtendremos la raíz cuadrada de la variable $suma$ guardándola en una variable con el nombre raíz.\n\nA continuació le muestro el ejemplo en `R`\n\n\n::: {.cell hash='_cache/unnamed-chunk-4_68050d87a6d77510135e44e9b9506bbf'}\n\n```{.r .cell-code}\nw <- 3   # Para evaluar la instrucción se debe presionar la tecla Control + ENTER.\nw        # Para observar el valor de la variable nombra la variable.\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\ny <- 7\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7\n```\n:::\n\n```{.r .cell-code}\nz <- 90 \nz\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 90\n```\n:::\n\n```{.r .cell-code}\nsuma <- w + y + z\nsuma\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 100\n```\n:::\n\n```{.r .cell-code}\nraiz <- sqrt(suma)\nraiz\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10\n```\n:::\n:::\n\n\nEn la primera línea se observa el simbolo `(#)`, el cual permite comentar el código, para tomar notas de interés.\n\nEn `R` tamién se puede almacenar cadenas de caracteres como se muestra en el siguiente ejemplo:\n\n\n::: {.cell hash='_cache/unnamed-chunk-5_9f265675d1ce44911ff362109bb6224c'}\n\n```{.r .cell-code}\na <- \"Cálculo\"\na\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Cálculo\"\n```\n:::\n\n```{.r .cell-code}\nb <- \"Microeconomía\"\nb\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Microeconomía\"\n```\n:::\n:::\n\n\nPara obtener un listado o desplegado de las variables que han sido definidas en la sesio ́n se debe de escribir el comando `ls()`.\n\n\n::: {.cell hash='_cache/unnamed-chunk-6_ae0df94214934049661ecf19646f76ed'}\n\n```{.r .cell-code}\nls()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"a\"    \"b\"    \"raiz\" \"suma\" \"w\"    \"y\"    \"z\"   \n```\n:::\n:::\n\n\n## Vectores\n\nUn vector es una secuencia ordenada de datos, los cuales han de ser del mismo tipo, es decir, todos deben de ser números, caracteres, cadenas de caracteres, valores lógicos, etc. Los tipos de datos que se pueden almacenar en un vector se destacan los siguientes:\n\n-   `logical (lógicos: TRUE, verdadero, o FALSE, falso)`\n-   `integer (números enteros)`\n-   `numeric (números reales)`\n-   `character (palabras)`\n\n### Creación de un Vector\n\nLa forma correcta de almacenar un conjunto de datos, es a través de una asignación utilizando el comando `c`, donde dicha lista de números se almacenan bajo nombre, y así mismo este se utiliza para referirse a los datos que almacena, la asignación se realiza especificando el símbolo `<-`.\\\n\nPara generar un vector utilizamos la función `c` separado cada uno de los elementos por medio de una coma `(,)` por ejemplo si se quisiera almacenar la secuencia $0,1,2,3,4,5,6,7,8,9$ dentro de un vector llamado $vector$\n\n\n::: {.cell hash='_cache/unnamed-chunk-7_c923c4695207ab28e7ea23e48ab9fb46'}\n\n```{.r .cell-code}\nvector <- c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\nvector\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 0 1 2 3 4 5 6 7 8 9\n```\n:::\n:::\n\n\nSi se desea crear un vector de letras, palabras o cadenas de caracteres llamadas `string`, se tiene que nombrar cada cadena de caracteres entre comillas de manera obligatoria\n\n\n::: {.cell hash='_cache/unnamed-chunk-8_b598c789c02caa366c9a82878957cdf5'}\n\n```{.r .cell-code}\nvectorletra <- c(\"a\", \"b\", \"c\", \"d\", \"e\")\nvectorletra\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"a\" \"b\" \"c\" \"d\" \"e\"\n```\n:::\n\n```{.r .cell-code}\nvectorpalabra <- c(\"Micro\", \"Economía\", \"en\", \"R\")\nvectorpalabra\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Micro\"    \"Economía\" \"en\"       \"R\"       \n```\n:::\n:::\n\n\nSe puede facilitar la creación de vectores podemos utilizar `c(a:b)` para datos de manera consecutiva, el comando `seq(a, b, by = p)` de manera aritmética, donde $a$ es el primer elemento, $b$ es el último elemento y $p$ es la diferencia de cada elemento.\n\n\n::: {.cell hash='_cache/unnamed-chunk-9_118ba2a082cd57becd89c1b8f186cc2f'}\n\n```{.r .cell-code}\nw <- c(0:10)\nw\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  0  1  2  3  4  5  6  7  8  9 10\n```\n:::\n\n```{.r .cell-code}\ny <- seq(0, 100, by = 10)\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]   0  10  20  30  40  50  60  70  80  90 100\n```\n:::\n:::\n\n\n### Operaciones con vectores\n\nSe pueden realizar operaciones como suma, resta, producto de vectores, se utilizaran los vectores $w$ e $y$ para ejemplificar las operaciones.\n\n\n::: {.cell hash='_cache/unnamed-chunk-10_4484fdde9c32a6c64c0e75d90476420f'}\n\n```{.r .cell-code}\nsuma <- w + y\nsuma \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]   0  11  22  33  44  55  66  77  88  99 110\n```\n:::\n\n```{.r .cell-code}\nresta <- w - y\nresta\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]   0  -9 -18 -27 -36 -45 -54 -63 -72 -81 -90\n```\n:::\n\n```{.r .cell-code}\nproducto <- w*y\nproducto\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]    0   10   40   90  160  250  360  490  640  810 1000\n```\n:::\n:::\n\n\nEl manejo de vectores en `R` tiene una propiedad muy útil: podemos aplicar una función a todos los elementos de un vector en un solo paso.\n\n\n::: {.cell hash='_cache/unnamed-chunk-11_66c6909d315ba81e355eebb7d1772c52'}\n\n```{.r .cell-code}\nw + 5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  5  6  7  8  9 10 11 12 13 14 15\n```\n:::\n\n```{.r .cell-code}\nw - 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] -2 -1  0  1  2  3  4  5  6  7  8\n```\n:::\n\n```{.r .cell-code}\n10*w\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]   0  10  20  30  40  50  60  70  80  90 100\n```\n:::\n\n```{.r .cell-code}\nsqrt(w)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 0.000000 1.000000 1.414214 1.732051 2.000000 2.236068 2.449490 2.645751\n [9] 2.828427 3.000000 3.162278\n```\n:::\n\n```{.r .cell-code}\nw^2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]   0   1   4   9  16  25  36  49  64  81 100\n```\n:::\n:::\n\n\nEntre otras funciones para aplicar a vectores, y de gran importancia son las relacionadas principalmente con la estadística. Por ejemplo\n\n-   `max` y `min` calculan sus valores maximos y minimos respectivamente\n-   `sum` calcula la suma\n-   `prod` calcula el producto\n-   `mean` calcula la media\n-   `diff` calcula el vector formado por las diferencias sucesivas entre entradas del vector original.\n-   `sort` ordena los elementos del vector en el orden natural creciente del tipo de datos que lo forman, se puede incluir en su argumento el parámetro `decreasing = TRUE`.\n\n\n::: {.cell hash='_cache/unnamed-chunk-12_2f0866e0c5143f4f155cc84a6e34648d'}\n\n```{.r .cell-code}\nw\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  0  1  2  3  4  5  6  7  8  9 10\n```\n:::\n\n```{.r .cell-code}\nmax(w)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10\n```\n:::\n\n```{.r .cell-code}\nmin(w)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n\n```{.r .cell-code}\nsum(w)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 55\n```\n:::\n\n```{.r .cell-code}\nprod(w)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n\n```{.r .cell-code}\nmean(w)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n```{.r .cell-code}\ndiff(w)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 1 1 1 1 1 1 1 1 1 1\n```\n:::\n\n```{.r .cell-code}\nsort(w)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  0  1  2  3  4  5  6  7  8  9 10\n```\n:::\n\n```{.r .cell-code}\nsort(w, decreasing = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 10  9  8  7  6  5  4  3  2  1  0\n```\n:::\n:::\n\n\n## Matrices\n\nLas matrices son un tipo de vector particular, es un vector con un atributo especial, llamado dimensión. La dimensión establece el número de renglones y el número de columnas que tendrá una matriz, se debe recordar que una matriz no es más que un arreglo de números en $m$ renglones y $n$ columnas.\n\nPor ejemplo una matriz de 3 renglones y 3 columnas\n\n$$\\left[\\begin{array}{ccc}1 & 2 & 3 \\\\2 & 4 & 5 \\\\3 & 5 & 6\\end{array}\\right]$$ Se dispone de dos maneras básicas de definir una matriz en `R`. En primer lugar, la instrucción:\n\n$$matrix(vector,nrow = n, byrow = valorlogico)$$\n\nDefine una matriz de $n$ filas (rows) formada por las entradas del vector. Si se captura `byrow = TRUE`, la matriz se construye por filas, mientras que con `byrow = FALSE` se construye por columnas; este último es el valor por defecto, por lo que no hace falta especificarlo. En vez de emplear `nrow`, se puede indicar el número de columnas con `ncol`. Veamos algunos ejemplos:\n\n\n::: {.cell hash='_cache/unnamed-chunk-13_2f789773e79983fe283b0c476f2c361d'}\n\n```{.r .cell-code}\nmatrix(1:6,nrow = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n```\n:::\n\n```{.r .cell-code}\nmatrix(1:6, nrow = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n```\n:::\n\n```{.r .cell-code}\nmatrix(1:6, nrow = 2, byrow = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n```\n:::\n\n```{.r .cell-code}\nmatrix(1:6, nrow = 3, byrow = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]    1    2\n[2,]    3    4\n[3,]    5    6\n```\n:::\n:::\n\n\nObserve cómo muestra `R` las matrices: indica las filas con $[i,]$, donde $i$ es el índice de la fila, y las columnas con $[,j]$, donde $j$ es el índice de la columna. Otra posible manera de definir matrices es combinando filas o columnas. La instrucción:\n\n$$rbind(vector1,vector2, vector3)$$ construya la matriz de filas $vector1, vector2, . . . , vector N$ que han de tener la misma longitud en este orden. Si en lugar de `rbind` se usa `cbind`, se obtiene la matriz cuyas columnas son los vectores a los que se aplica.\n\n\n::: {.cell hash='_cache/unnamed-chunk-14_f7859c1fab16f3123fff96b3ac816093'}\n\n```{.r .cell-code}\nrbind(c(1, 0, 2), c(2, 3, 6), c(1, 2, 0))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    0    2\n[2,]    2    3    6\n[3,]    1    2    0\n```\n:::\n\n```{.r .cell-code}\ncbind(c(1, 0, 2), c(2, 3, 6), c(1, 2, 0))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    2    1\n[2,]    0    3    2\n[3,]    2    6    0\n```\n:::\n:::\n\n\n## Data Frames\n\nLa manera más conveniente de guardar una tabla de datos en `R` es en forma de $dataframe$. En concreto, un $data$ $frame$ es una tabla de doble entrada, formada por variables en las columnas y observaciones de estas variables en las filas, de manera que cada fila contiene los valores de las variables para un mismo caso o individuo. En ese sentido, un $data$ $frame$ tiene la apariencia de una matriz, pero con la diferencia de que cada columna de un $data$ $frame$ puede contener datos de un tipo diferente siempre que todos los datos de una misma columna sean del mismo tipo porque corresponden a observaciones de una misma propiedad: así, una columna puede estar formada por números, por palabras, por valores lógicos, etcétera. De esta manera, las columnas de un data frame son vectores, mientras que las filas son listas.\n\n### Creación de Data Frames\n\nPara construir un $data$ $frame$ a partir de unos vectores, se usa la función `data.frame` aplicada a los vectores en el orden en el que queramos disponer las columnas de la tabla; de esta manera, las variables tomarán los nombres de los vectores. Estos nombres también se pueden especificar en el argumento de la función `data.frame`, entrando cada columna con una construcción de la forma:\n\n$$Nombre~variable = vector~con~el~contenido~de~la~variable$$\n\nPara ilustrar esta función usemos un ejemplo sencillo:\\\n\nUna compañía de seguros desea crear una base de datos para la gestión de las pólizas de sus asegurados. Para ello, los datos de los que dispone son los siguientes:\n\n-   De cada póliza se guarda el número de póliza.\n-   El tipo que puede ser \"Hogar\" o \"Auto\".\n-   La fecha de creación de la póliza.\n-   y el conjunto de coberturas incluidas en la póliza ( a elegir entre Incendio, Robo, Terceros y Responsabilidad Civil).\n-   Para cada póliza guardamos los atos de sus titulares, y sabemos que cada poliza tiene un único titular.\n-   De los titulares guardamos nombre, sexo, edad y estado de providencia.\n\n\n::: {.cell hash='_cache/unnamed-chunk-15_8dde9dd1ed8b4c59963debe0cff14365'}\n\n```{.r .cell-code}\nPoliza <- c(1:9)\n\nTipo <- c(\"Hogar\", \"Auto\", \"Auto\", \"Auto\", \"Hogar\", \"Hogar\", \"Auto\",\n           \"Auto\", \"Hogar\")\n\nFecha <- c(\"12/12/2016\", \"08/02/2014\", \"10/08/2012\", \"01/01/2015\",\n           \"21/11/2011\", \"18/01/2016\", \"12/04/2005\", \"29/03/2007\",\n           \"18/02/2009\")\n\nCoberturas <- c(\"Incendio\", \"Robo\", \"Terceros\", \"Robo\", \"Robo\",\n                \"Incendio\", \"Terceros\", \"R. Civil\", \"Incendio\")\n\nNombre <- c(\"Carlos\", \"Nancy\", \"Pedro\", \"Cecilia\", \"Ricardo\", \"Sofia\",\n            \"Armando\", \"Vicente\", \"Fernando\")\n\nSexo <- c(\"M\", \"F\", \"M\", \"F\", \"M\", \"F\", \"M\", \"M\", \"M\")\n\nEdad <- c(25, 35, 45, 47, 24, 43, 33, 31, 40)\n\nEstado <- c(\"Campeche\", \"Chiapas\", \"Ciudad de M ́exico\", \"Coahuila\",\n            \"Durango\", \"Guanajuato\", \"Guerrero\", \"Hidalgo\", \"Jalisco\")\n\ndataframe= data.frame(Poliza, Tipo, Fecha, Coberturas, Nombre, Sexo, Edad)\n\ndataframe\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Poliza  Tipo      Fecha Coberturas   Nombre Sexo Edad\n1      1 Hogar 12/12/2016   Incendio   Carlos    M   25\n2      2  Auto 08/02/2014       Robo    Nancy    F   35\n3      3  Auto 10/08/2012   Terceros    Pedro    M   45\n4      4  Auto 01/01/2015       Robo  Cecilia    F   47\n5      5 Hogar 21/11/2011       Robo  Ricardo    M   24\n6      6 Hogar 18/01/2016   Incendio    Sofia    F   43\n7      7  Auto 12/04/2005   Terceros  Armando    M   33\n8      8  Auto 29/03/2007   R. Civil  Vicente    M   31\n9      9 Hogar 18/02/2009   Incendio Fernando    M   40\n```\n:::\n:::\n\n\n## Instalación de Librerías\n\nR es un lenguaje que permite la implementación de paquetes adicionales que le dan una capacidad de gestión de datos más amplia y permiten la implementación de nuevas funciones que harán de R un programa que se adapte a las necesidades.\\\n\nEl procedimiento para instalar un paquete depende del sistema operativo usado y de la manera como se instalo `R`: ya sea desde el código fuente o desde o por medio de archivos binarios pre-compilados. Existen varias funciones para manejar paquetes tales como:\n\n-   `installed.packages()`\n-   `CRAN.package()`\n-   `download.packages()`\n\nPara verificar la versión de paquetes ya instalados en el sistema y actualizarlos a la versión más reciente utilizamos la siguiente función:\n\n-   `update.packages()`\n\n# Bibliografías\n\n-   [R para principiantes](https://bookdown.org/jboscomendoza/r-principiantes4/)\n\n-   [El arte de programar en R](https://cran.r-project.org/doc/contrib/Santana_El_arte_de_programar_en_R.pdf)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}